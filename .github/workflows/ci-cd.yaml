name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy_app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile_app
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/expense-tracker:latest
          labels: expense-tracker=app

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH Host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa 16.171.255.74 >> ~/.ssh/known_hosts

      - name: Power off existing containers and Deploy to Server
        run: |
          ssh ubuntu@16.171.255.74 << EOF

            # Create a Docker network if it doesn't exist
            docker network create expense-network || true

            # Stop and remove existing database containers
            docker stop expense-tracker expensetrackerdb || true
            docker rm expense-tracker expensetrackerdb || true

            # Run PostgreSQL container
            docker run -d --name expensetrackerdb \
              --network expense-network \
              -e POSTGRES_USER=${{ secrets.POSTGRES_USER}} \
              -e POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} \
              -e POSTGRES_DB=expense_tracker \
              postgres:16

            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/expense-tracker:latest
            # Stop and Remove Existing App Containers
            sudo docker stop expense-tracker || true
            sudo docker rm expense-tracker || true

            # Run the new App container
            sudo docker run -d --name expense-tracker \
              --network expense-network \
              -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
              -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
              -p 5000:5000 \
              ${{ secrets.DOCKER_USERNAME }}/expense-tracker:latest

            # Clean up old App images
            sudo docker image prune --filter "until=48h" --filter "label=expense-tracker"
          EOF

      - name: Check Application Health
        run: |
          max_attempts=10
          wait_seconds=10
          for i in $(seq 1 $max_attempts); do
            echo "Attempt $i/$max_attempts"
            
            # Check if the container is running
            container_status=$(ssh ubuntu@16.171.255.74 "sudo docker inspect -f '{{.State.Status}}' expense-tracker")
            if [ "$container_status" != "running" ]; then
              echo "Container is not running. Status: $container_status"
              exit 1
            fi
            
            # Check the application's response
            response=$(curl -s -o /dev/null -w "%{http_code}" http://16.171.255.74:5000)
            if [ $response = "200" ]; then
              echo "Application is up and running!"
              exit 0
            elif [ $response = "000" ]; then
              echo "Connection refused. Application might still be starting..."
            else
              echo "Received unexpected status code: $response"
            fi
            
            # Check container logs for errors
            error_log=$(ssh ubuntu@16.171.255.74 "sudo docker logs --tail 20 expense-tracker 2>&1 | grep -i 'error'")
            if [ ! -z "$error_log" ]; then
              echo "Found errors in container logs:"
              echo "$error_log"
              exit 1
            fi
            
            sleep $wait_seconds
          done
          echo "Application failed to start within the expected time."
          exit 1

      - name: Fetch Application Logs on Failure
        if: failure()
        run: |
          ssh ubuntu@16.171.255.74 "sudo docker logs expense-tracker"